version: 2.1

# Define reusable executors
executors:
  python-executor:
    docker:
      - image: cimg/python:3.11
    working_directory: ~/project

  node-executor:
    docker:
      - image: cimg/node:20.19
    working_directory: ~/project

# Define jobs
jobs:
  # Backend tests
  test-backend:
    executor: python-executor
    steps:
      - checkout

      - restore_cache:
          keys:
            - backend-deps-{{ checksum "requirements.txt" }}
            - backend-deps-

      - run:
          name: Install Python dependencies
          command: |
            cd backend
            pip install -r ../requirements.txt

      - save_cache:
          key: backend-deps-{{ checksum "requirements.txt" }}
          paths:
            - ~/.cache/pip

      - run:
          name: Run backend tests
          command: |
            cd backend
            python manage.py test --verbosity=2

      - run:
          name: Check for migrations
          command: |
            cd backend
            python manage.py makemigrations --check --dry-run

      - store_test_results:
          path: backend/test-results

      - store_artifacts:
          path: backend/test-results
          destination: test-results

  # Frontend tests
  test-frontend:
    executor: node-executor
    steps:
      - checkout

      - restore_cache:
          keys:
            - frontend-deps-{{ checksum "frontend/package-lock.json" }}
            - frontend-deps-

      - run:
          name: Install Node dependencies
          command: |
            cd frontend
            npm ci

      - save_cache:
          key: frontend-deps-{{ checksum "frontend/package-lock.json" }}
          paths:
            - frontend/node_modules

      - run:
          name: Run type check
          command: |
            cd frontend
            npm run type-check

      - run:
          name: Run frontend tests
          command: |
            cd frontend
            npm test -- --run --reporter=verbose

      - store_test_results:
          path: frontend/test-results

      - store_artifacts:
          path: frontend/test-results
          destination: test-results

  # Build frontend for production
  build-frontend:
    executor: node-executor
    steps:
      - checkout

      - restore_cache:
          keys:
            - frontend-deps-{{ checksum "frontend/package-lock.json" }}

      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm ci

      - run:
          name: Build production bundle
          command: |
            cd frontend
            npm run build
            echo "Build completed successfully at $(date)"
            echo "Build size:"
            du -sh dist/

      - persist_to_workspace:
          root: .
          paths:
            - frontend/dist

      - store_artifacts:
          path: frontend/dist
          destination: frontend-build

  # Deploy to Ubuntu server
  deploy:
    executor: python-executor
    steps:
      - checkout

      - attach_workspace:
          at: .

      - add_ssh_keys:
          fingerprints:
            - "SHA256:3GEkTkB/xpzQysu40+RO6L/g0JUxXIYQWQwy8h3FAog"

      - run:
          name: Add server to known hosts
          command: |
            mkdir -p ~/.ssh
            ssh-keyscan -H ${SERVER_IP} >> ~/.ssh/known_hosts

      - run:
          name: Verify SSH connection
          command: |
            echo "Testing SSH connection to ${DEPLOY_USER}@${SERVER_IP}..."
            ssh -o StrictHostKeyChecking=no ${DEPLOY_USER}@${SERVER_IP} 'echo "SSH connection successful!"'

      - run:
          name: Deploy to server
          command: |
            echo "Starting deployment to ${SERVER_IP}..."

            # Copy deployment script to server
            echo "Copying deployment script..."
            scp deployment/deploy.sh ${DEPLOY_USER}@${SERVER_IP}:/tmp/deploy.sh

            # Copy frontend build
            echo "Copying frontend build..."
            scp -r frontend/dist ${DEPLOY_USER}@${SERVER_IP}:/tmp/frontend-dist

            # Execute deployment
            echo "Executing deployment script..."
            ssh ${DEPLOY_USER}@${SERVER_IP} 'bash /tmp/deploy.sh'

            echo "Deployment completed successfully!"

      - run:
          name: Verify deployment
          when: on_success
          command: |
            echo "Verifying services on server..."
            ssh ${DEPLOY_USER}@${SERVER_IP} 'sudo systemctl is-active gunicorn && sudo systemctl is-active nginx'
            echo "All services are running âœ“"

# Define workflows
workflows:
  version: 2
  test-and-deploy:
    jobs:
      - test-backend
      - test-frontend
      - build-frontend:
          requires:
            - test-frontend
      - deploy:
          requires:
            - test-backend
            - build-frontend
          filters:
            branches:
              only:
                - main
                - master
